<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.social">
	
	<!--반환 레코드를 config에서 지정한 =VO 빈에 저장 -->
	<resultMap id="feedResult" type="feedVO">
		<result property="writerID" column="writerID" />	<!-- bean 속성 / db 칼럼명 (대응) -->
		<result property="writerName" column="writerName" />
		<result property="pfImagePath" column="pfImagePath" />
		<result property="numHeart" column="numHeart" />
		<result property="numComment" column="numComment" />
		<result property="boardNo" column="boardNo" />
		<result property="imagePath" column="imagePath" />
		<result property="contents" column="contents" />
		<result property="regDate" column="regDate" />
	</resultMap>
	
	<!--반환 레코드를 config에서 지정한 =VO 빈에 저장 -->
	<resultMap id="commentFeedResult" type="commentFeedVO">
		<result property="commenterID" column="commenterID" />	<!-- bean 속성 / db 칼럼명 (대응) -->
		<result property="commenterName" column="commenterName" />
		<result property="pfImagePath" column="pfImagePath" />
		<result property="numGood" column="numGood" />
		<result property="commentNo" column="commentNo" />
		<result property="contents" column="contents" />
		<result property="regDate" column="regDate" />
	</resultMap>
	
	<!--반환 레코드를 config에서 지정한 =VO 빈에 저장 -->
	<resultMap id="userspaceResult" type="userspaceVO">
		<result property="userID" column="userID" />	<!-- bean 속성 / db 칼럼명 (대응) -->
		<result property="nickname" column="nickname" />
		<result property="pfImagePath" column="pfImagePath" />
		<result property="pfContents" column="pfContents" />
		<result property="numBoard" column="numBoard" />
		<result property="numFollower" column="numFollower" />
		<result property="numFollowing" column="numFollowing" />
		<result property="if_following" column="if_following" />
		<result property="following_friendsID" column="following_friendsID" />
		<result property="following_friendsName" column="following_friendsName" />
		<result property="following_friendsImgPath" column="following_friendsImgPath" />
	</resultMap>

	
	
	<!-- SQL문. 반환 레코드를 Result에 저장 -->
	
	<!-- 최신순 피드 타입 조회 쿼리 -->
	<select id="showFeed" resultMap="feedResult" parameterType="followVO">
	<![CDATA[
		SELECT U.userID writerID, U.nickname writerName, U.pfImagePath pfImagePath,
              (SELECT COUNT(*) FROM HEART where HEART.boardNo = B.boardNo) numHeart,
              (SELECT COUNT(*) FROM `COMMENT` where `COMMENT`.boardNo = B.boardNo) numComment,
              IF(
              (SELECT COUNT(*) FROM HEART where hearterID = #{followerID} AND boardNo = B.boardNo)>0
              ,"hearting","not_hearting"
              ) if_hearting,       -- 게시물 하트 여부
              B.boardNo boardNo, B.filePath imagePath, B.contents contents, B.regDate regDate
 		FROM `USER` U, `BOARD` B
		WHERE U.userID = B.userID
 		ORDER BY regDate DESC
	]]>
		<if test="pageStart != -1 and pageSize != -1">
			LIMIT #{pageStart}, #{pageSize}
		</if>
	</select>
	
	<!-- 팔로우 피드 타입 조회 쿼리 -->
	<select id="showFollowFeed" resultMap="feedResult" parameterType="followVO">
	<![CDATA[
		SELECT U.userID writerID, U.nickname writerName, U.pfImagePath pfImagePath,
              (SELECT COUNT(*) FROM HEART where HEART.boardNo = B.boardNo) numHeart,
              (SELECT COUNT(*) FROM `COMMENT` where `COMMENT`.boardNo = B.boardNo) numComment,
			IF(
              (SELECT COUNT(*) FROM HEART where hearterID = #{followerID} AND boardNo = B.boardNo)>0
              ,"hearting","not_hearting"
              ) if_hearting,       -- 게시물 하트 여부
              B.boardNo boardNo, B.filePath imagePath, B.contents contents, B.regDate regDate
 		FROM `USER` U, `BOARD` B
 		WHERE (U.userID in (SELECT followedID FROM FOLLOW WHERE followerID = #{followerID}) OR U.userID = #{followerID})
				AND B.userID = U.userID
 		ORDER BY regDate DESC
	]]>
		<if test="pageStart != -1 and pageSize != -1">
			LIMIT #{pageStart}, #{pageSize}
		</if>
	</select>
	
	<!-- 피드 조건 검색 -->
	<select id="searchFeed" resultMap="feedResult" parameterType="expandedFeedVO">
	<![CDATA[
		SELECT U.userID writerID, U.nickname writerName, U.pfImagePath pfImagePath,
              (SELECT COUNT(*) FROM HEART where HEART.boardNo = B.boardNo) numHeart,
              (SELECT COUNT(*) FROM `COMMENT` where `COMMENT`.boardNo = B.boardNo) numComment,
				IF(
              (SELECT COUNT(*) FROM HEART where hearterID = #{myID} AND boardNo = B.boardNo)>0
              ,"hearting","not_hearting"
              ) if_hearting,       -- 게시물 하트 여부
              B.boardNo boardNo, B.filePath imagePath, B.contents contents, B.regDate regDate 
 		FROM `USER` U, `BOARD` B
	]]>
		<where>
			U.userID = B.userID
			<if test="writerID != '' and writerID != null">
				and U.userID = #{writerID}
			</if>
			<if test="writerName != '' and writerName != null">
				and U.nickname = #{writerName}
			</if>
			<if test="pfImagePath != '' and pfImagePath != null">
				and U.pfImagePath = #{pfImagePath}
			</if>
			<if test="boardNo != '' and boardNo != null">
				and B.boardNo = #{boardNo}
			</if>
			<if test="imagePath != '' and imagePath != null">
				and B.filePath = #{imagePath}
			</if>
			<if test="contents != '' and contents != null">
				and B.contents = #{contents}
			</if>
			<if test="regDate != '' and regDate != null">
				and B.regDate = #{regDate}
			</if>
		</where>
		ORDER BY regDate DESC
		<if test="pageStart != -1 and pageSize != -1">
			LIMIT #{pageStart}, #{pageSize}
		</if>
	</select>
	
	<!-- 해당 사용자가 좋아요한 피드 -->
	<select id="showHeartFeed" resultMap="feedResult" parameterType="followVO">
	<![CDATA[
		SELECT U.userID writerID, U.nickname writerName, U.pfImagePath pfImagePath,
              (SELECT COUNT(*) FROM HEART where HEART.boardNo = B.boardNo) numHeart,
              (SELECT COUNT(*) FROM `COMMENT` where `COMMENT`.boardNo = B.boardNo) numComment,
				IF(
              (SELECT COUNT(*) FROM HEART where hearterID = #{followerID} AND boardNo = B.boardNo)>0
              ,"hearting","not_hearting"
              ) if_hearting,       -- 게시물 하트 여부	
              B.boardNo boardNo, B.filePath imagePath, B.contents contents, B.regDate regDate 
 		FROM `USER` U, `BOARD` B
		WHERE U.userID = B.userID
			AND B.boardNo in 
            (select boardNo FROM HEART where hearterID = #{followedID})
 		ORDER BY regDate DESC
	]]>
		<if test="pageStart != -1 and pageSize != -1">
			LIMIT #{pageStart}, #{pageSize}
		</if>
	</select>
	
	
	
	
	
	<!-- 댓글 조회 쿼리 -->
	<select id="showCommentInBoard" resultMap="commentFeedResult" parameterType="boardVO">
	<![CDATA[
		SELECT U.userID commenterID, U.nickname commenterName, U.pfImagePath pfImagePath,
              (SELECT COUNT(*) FROM GOOD where GOOD.commentNo = C.commentNo) numGood,
              C.commentNo commentNo, C.contents contents, C.regDate regDate
 		FROM `USER` U, `COMMENT` C
 		WHERE C.boardNo = #{boardNo} AND U.userID = C.writerID
 		ORDER BY regDate DESC
	]]>
		<if test="pageStart != -1 and pageSize != -1">
			LIMIT #{pageStart}, #{pageSize}
		</if>
	
	</select>
	
	<!--유저 스페이스 쿼리-->
	<select id="showUserSpace" resultMap="userspaceResult" parameterType="followVO">
	<![CDATA[

		SELECT U.userID userID, U.nickname nickname, U.pfImagePath pfImagePath, U.pfContents pfContents,
              (SELECT COUNT(*) FROM BOARD where BOARD.userID = U.userID) numBoard,
              (SELECT COUNT(*) FROM FOLLOW where FOLLOW.followedID = U.userID) numFollower,
              (SELECT COUNT(*) FROM FOLLOW where FOLLOW.followerID = U.userID) numFollowing,
              IF(
              (SELECT COUNT(*) FROM FOLLOW where FOLLOW.followerID = #{followerID} AND FOLLOW.followedID = U.userID)>0
              ,"following","not_following"
              ) if_following,       -- 팔로잉 여부
               @following_friendsID := 
               (SELECT followerID FROM FOLLOW 
				  where FOLLOW.followedID = #{followedID} AND 
				  FOLLOW.followerID in 
				  (
					select * from (
						(SELECT followedID FROM FOLLOW where FOLLOW.followerID = #{followerID}) as tmp)
					) ORDER BY RAND() DESC LIMIT 1
				) following_friendsID,     -- 내(a)가 팔로우하는 사람 중, x를 팔로우하고 있는 사람의 아이디를 랜덤으로 선택
              (SELECT nickname from `USER` where `USER`.userID = @following_friendsID) following_friendsName,   -- x를 팔로우하는 친구의 닉네임
              (SELECT pfImagePath from `USER` where `USER`.userID = @following_friendsID) following_friendsImgPath   -- x를 팔로우하는 친구의 프사  
 		FROM `USER` U 
 		WHERE U.userID = #{followedID};
		
	]]>
	</select>
	
	
	
</mapper>

